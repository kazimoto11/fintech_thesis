# -*- coding: utf-8 -*-
"""Thesis Notebook Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-9lN-07QRAYZkOBLVOKJgXq-GdbmnGHi

#Import Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import math

from IPython import display
from matplotlib import cm
from matplotlib import gridspec
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn import metrics
from sklearn.metrics import accuracy_score
from datetime import datetime
# %matplotlib inline

# Load the Drive helper and mount
from google.colab import drive
drive.mount('/content/drive')

"""#Import Datasets

##October Records

The october dataset consists of all the transactional and loan records of merchants who took loans from May to October.
"""

october = pd.read_csv('/content/drive/MyDrive/Nomanini/oct.csv')
october

october.info()

"""##Loans dataset

Loans dataset is the dataset that consist of the loans taken by merchants.
"""

loans = pd.read_csv("/content/drive/MyDrive/Nomanini/loans.csv")
loans

"""From 12/05/2020, a total of 966 loans were processed to the date 26/11/2020.

##Offers dataset

Offers dataset comprises of the details of the loan products
available on the platform. This include  the description title, amount, fee and period of length in days of the loan prodducts.
"""

offer = pd.read_csv("/content/drive/MyDrive/Nomanini/loan_offer.csv")
offer

offer['title'].nunique()

"""There are a total of 268 unique loan products.

##Merchant offer

Merchant-offer dataset consist of the loan product details taken by merchants.
"""

merchants_offer = pd.read_csv("/content/drive/MyDrive/Nomanini/merchant_offer.csv")

merchants_offer

"""#Data Preprocessing"""

loans.info()

"""Convert the loans['opened_time'] column into dat and time format  to add new columns od month and hour into the loans dataset."""

loans['opened_time'] = pd.to_datetime(loans['opened_time'])
loans['month'] = loans['opened_time'].dt.month
loans['hour'] = loans['opened_time'].dt.hour
loans.head()

merchants_offer.head()

#rename id to merchant_offer_id to be able to join the datasets
merchants_offer.rename(columns={'id': 'merchant_offer_id'}, inplace = True)
merchants_offer.head()

merchants_offer.shape[0]

#rename id to offer_id to be able to join the datasets

offer.rename(columns={'id': 'offer_id'}, inplace = True)
offer.head()

"""###Loan details example.

1. In the **loans dataset**, a loan of id = '000ca543f55c43598ca217f6343bdc84' was taken with the **merchant_offer_id** = 'aba9cbd014684b1cbb4fa0a8d5d8d613'. 

2. To obtain more details about the loan we move to the **merchants_offer**  dataset (**id column**) to obtain the **merchant_id**and **offer_id** of that loan. Using the following line of code - **merchants_offer[merchants_offer['id'] == 'aba9cbd014684b1cbb4fa0a8d5d8d613']**, we obtain the **merchant** and **offer** id of the **loan**.


3. From step 2, we obtain the merchant_id = **'5f8927cf5c3c4a6abdd82949906b0440'** and offer_id = **'41d40ece0b3b4bf0b59ecf474c074bfd'**. Now we can move to the **offer** dataset and obtain which loan offer did the merchant take. 

4. From the offer dataset, the merchant took **'M500 for 5 days'**, for an amount of **500** and was charged a fee of amount **10** and it was valid for **5 days**, which he paid on time from the information indicated in the loans dataset.
"""

merchants_offer['offer_id'].nunique()

"""###Joining datasets

####Offer and Merchants
"""

merchants_offer_merge = pd.merge(merchants_offer, offer, on='offer_id')

merchants_offer_merge.info()

merchants_offer_merge.head()

"""####Loans, offers and merchants"""

loans['id'].nunique()

loans_merged = pd.merge(loans, merchants_offer_merge, on='merchant_offer_id')
loans_merged.head()

#Rename mercahnt_id to account_id so as we can merge it with other datasets

loans_merged.rename(columns={"merchant_id":"account_id"}, inplace = True)

"""**There were 966 loans taken from 12-May-2020 to 26-November-2020**

#Target outcome

*   X VARIABLES - October Records Features
*   Y (TARGET OUTCOME) - November default status
"""

nov = loans_merged[loans_merged['month'] == 11]
nov

accs = nov['account_id']
nov_type = []

for acc in accs:
  #count the unique number of different repayment status of merchants in November
  a = dict(nov[nov['account_id'] == acc]['repayment_status'].value_counts())
  #append it to the nov_type list
  nov_type.append(a)

nov_type

#convert nov_type to a df
nov_type = pd.DataFrame(nov_type)
#add the account ids
nov_type['account_id'] = nov['account_id'].to_list()
#create a df for acount_id, ok, delinquents and defaults
nov_type = nov_type[['account_id','ok','delinquent','default']]
#print the df
nov_type

#drop account_id duplicates
nov_type.drop_duplicates(inplace=True)
#fill NaN with zeros since for account_ids with NaNs mean they didn't have that kind of repayment status
nov_type.fillna(0,inplace = True)
#print df
nov_type

#add an empty status list for recording anytime a merchant defaulted or showed delinquent behaviour.

status = []


for index, row in nov_type.iterrows():
  #Status = 0 if merchant did default or was a delinquent in the month of November
  if row['default'] == 1 or row['delinquent'] == 1 :
    status.append(1)
  #Status = 1 if merchant didn't default or was a delinquent in the month of November
  else:
    status.append(0)
#add the status list to the account_ids
nov_type['status'] = status 
#print df
nov_type

#reset index for the account_id and statuses
oct_y = nov_type[['account_id','status']].reset_index(drop='True')
oct_y

#merge the transactional, loan and default status variables
data = pd.merge(october,oct_y,on = 'account_id')
#print df
data

#renaming the columns/ variables

#'AirtimePin':'No. of airtime pins'- No. of airtime pins a merchant bought
#'LoanDisbursement':'No. of loans disbursed', - Total number of loans that were disbursed to the merchant
#'MerchantDeposit':'No. of merchant deposits', - Total number deposits by the merchant
#'LoanRepayment':'No. of loan repayments', - Total number of loans that the merchant paid back
#'amount':'Amount', - Total monetray amount of the loans taken by merchant
#'ok': 'No. of paid loans', - Total number of times the merchant paid back his/her loans on-time
#'delinquent':'No. of delinquent loans', - Total number of times the merchant paid back his/her loans late (within the 24-hour window after deadline )
#'default': 'No. of defaulted loans', - Total number of times the merchant didn't pay back his/her loans on-time
#'status':'Default status' - It's either a 1 or 0, demonstrating if either the merchant paid back on-time all of his/her loans in the month of November 


data.rename(columns = {'AirtimePin':'No. of airtime pins','LoanDisbursement':'No. of loans disbursed',
                       'MerchantDeposit':'No. of merchant deposits','LoanRepayment':'No. of loan repayments',
                       'amount':'Amount', 'ok': 'No. of paid loans', 'delinquent':'No. of delinquent loans',
                       'default': 'No. of defaulted loans', 'status':'Default status',}, inplace = True)

#print df
data

#data df has 62 merchants who took loans in the Month of November 2020.

#data df distribution of target outcome
data['Default status'].value_counts().plot(kind='bar')

"""#Feature Engineering"""

# Average amount per transaction feature - the ratio of the total amount of transactions processed by a merchant to the total number of transactions.
data['Avg amount per transaction'] = data['Amount'] / (data['No. of airtime pins'] + data['No. of loan repayments'])

#Credit history feature - represents a merchantâ€™s percentage proportion of paid loans to total loans taken out on the platform. 
data['Credit History'] = (data['No. of paid loans']/(data['No. of paid loans'] + data['No. of delinquent loans'] + data['No. of defaulted loans']))*100

"""#EDA

##Feature Importance
"""

#List of all the predictor variables
features = ['No. of airtime pins', 'No. of loans disbursed', 'Amount', 'No. of paid loans',
            'No. of delinquent loans', 'No. of defaulted loans', 'Avg amount per transaction',
            'Credit History']
            
#No. of merchant deposits &	No. of loan repayments features are dropped from the features list becausof missing data

#target outcome
y = data['Default status']

# random forest for feature importance on a classification problem
from sklearn.ensemble import RandomForestClassifier
from matplotlib import pyplot
# define the model
model = RandomForestClassifier(n_estimators=1000)
# fit the model
model.fit(data[features], y)
# get importance
importance = model.feature_importances_
# summarize feature importance
for i,v in enumerate(importance):
	print('Feature: %0d, Score: %.5f' % (i,v))
# plot feature importance
pyplot.bar([x for x in range(len(importance))], importance)
pyplot.show()

"""

*   Feature 0 - No. of air time pins
*   Feature 1 - No. of loan disbursements
*   Feature 2 - Amount
*   Feature 3 - No. of paid loans
*   Feature 4 - No. of delinquent loans
*   Feature 5 - No. of defaulted loans
*   Feature 6 - Average Amount per transaction
*   Feature 7 - Credit History




"""

importance

model.feature_importances_

# Set up the matplotlib figure by importance of the features
f, ax = plt.subplots(figsize=(18, 7))

sns.barplot(x= features, y =importance, color ='dodgerblue')

"""##Correlation plot"""

df = data[features].corr(method='spearman')
# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(df, dtype=bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))


sns.heatmap(df, mask = mask, cmap="YlGnBu", vmax=1, center=0,vmin = -1,
            square=True, linewidths=.5, cbar_kws={"shrink": .5},)

df = data[features].corr(method='pearson')
# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(df, dtype=bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))


sns.heatmap(df, mask = mask, cmap="YlGnBu", vmax=1, center=0,vmin = -1,
            square=True, linewidths=.5, cbar_kws={"shrink": .5},)

"""##Default Status Analysis

###Credit History
"""

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(9, 9))

sns.boxplot(x=data['Default status'],y=data['Credit History'], data = data)

"""###Avg amount per trnasaction"""

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))

sns.boxplot(x=data['Default status'],y=data['Avg amount per transaction'], data = data)

"""###Avg Vs Creidt History"""

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(9, 9))

sns.scatterplot(x='Avg amount per transaction', y = 'Credit History', hue = 'Default status', data=data)